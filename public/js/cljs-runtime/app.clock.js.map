{"version":3,"sources":["app/clock.cljs"],"mappings":";;AAMA,AAAKA,2BAAe,gDAAA,hDAACC;AAErB,AAAKC,iBAAK,gDAAA,AAAA,hDAACD;AAEX,AAAKE,+BAAmB,gDAAA,wCAAA,uEAAA,mEAAA,kEAAA,uDAAA,+DAAA,2DAAA,qDAAA,+EAAA,2DAAA,yDAAA,mEAAA,KAAA,UAAA,UAAA,QAAA,4DAAA,iCAAA,KAAA,2CAAA,yDAAA,UAAA,yDAAA,OAAA,qDAAA,tnCAACF,2zBAUiB,AAAa,KAAKG,qBACpB,AAAW,KAAKA,0BACd,AAAa,KAAKA;AAE5D,6BAAA,7BAAMC;AAAN,AACE,mBAAA,ZAACC;AAAD,AACE,GAAI,cAAA,AAAAC,dAACC,8BAAKR;AACP,IAAMS,OAAK,KAAKL;AAAhB,AACE,gGAAA,hGAACM,mDAAMP,6BAAmBQ,2EAAe,AAAaF;;AACtD,gGAAA,hGAACC,mDAAMP,6BAAmBQ,qEAAa,AAAWF;;AAClD,uGAAA,hGAACC,mDAAMP,6BAAmBQ,2EAAe,AAAaF;;AAJ3D;;GADF;;AAQF,2BAAA,3BAAMG;AAAN,AACE,OAACC,sBAAOb,yBAAe,cAAA,AAAAO,dAACC,8BAAKR;;AAE/B,kBAAA,lBAAMe;AAAN,AACE,AAACV;;AADH,0FAAA,8DAAA,mFAAA,0GAAA,AAAAE,sDAAA,mFAAA,2DAAA,mFAAA,0FAAA,2CAAA,8FAAA,4BAAA,mFAAA,0FAAA,2CAAA,8FAAA,uBAAA,mFAAA,sDAAA,2CAAA,qDAAA,OAAA,sDAAA,AAAAA,gCAAA,+DAAA,WAAAO,9yCAGOE,2EAAab,ycAEqBS,kVACAA,8WAG3BV;AATd,AAUkB,OAACW,sBAAOX,eAAK,AAAS,AAAAY;GAVxC,mEAAA","names":["app.clock/display-custom","reagent.core.atom","app.clock/date","app.clock/analog-clock-props","js/Date","app.clock/get-current-time","js/setInterval","cljs.core/deref","cljs.core/not","date","cljs.core.swap_BANG_","cljs.core/assoc","app.clock/change-display","cljs.core/reset!","p1__46426#","app.clock/clock","js/module$node_modules$analog_clock_react$build$index.default"],"sourcesContent":["(ns app.clock\n  (:require\n   [reagent.core :as r]\n   [\"analog-clock-react\" :default AnalogClock]\n   [app.button :refer [button]]))\n\n(def display-custom (r/atom false))\n\n(def date (r/atom '()))\n\n(def analog-clock-props (r/atom {:useCustomTime true\n                                 :width \"300px\"\n                                 :border true\n                                 :borderColor \"#2e2e2e\"\n                                 :baseColor \"#17a2b8\"\n                                 :centerColor \"#459cff\"\n                                 :centerBorderColor \"#fff\"\n                                 :handColors {:second \"#d81c7a\"\n                                              :minute \"#fff\"\n                                              :hour \"#fff\"}\n                                 :seconds (.getSeconds (new js/Date))\n                                 :hours (.getHours (new js/Date))\n                                 :minutes (.getMinutes (new js/Date))}))\n\n(defn get-current-time []\n  (js/setInterval\n   #(if (not @display-custom)\n       (let [date (new js/Date)]\n         (swap! analog-clock-props assoc :seconds (.getSeconds date))\n         (swap! analog-clock-props assoc :hours (.getHours date))\n         (swap! analog-clock-props assoc :minutes (.getMinutes date))))\n   1000))\n\n(defn change-display []\n  (reset! display-custom (not @display-custom)))\n\n(defn clock []\n  (get-current-time)\n  [:div.clock\n   [:> AnalogClock @analog-clock-props]\n   [:div.btn\n    [:button.try-for-free-btn {:on-click change-display} \"show current time\"]\n    [:button.try-for-free-btn {:on-click change-display} \"show customn\"]\n    [:input\n     {:type \"text\"\n      :value @date\n      :on-change #(reset! date (.-value (.-target %)))\n      :placeholder \"enter in format: hh:mm:ss\"}]]])"]}