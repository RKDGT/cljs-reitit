{"version":3,"sources":["app/core.cljs"],"mappings":";AAwBA,AAAKA,sBAAW,gDAAA,hDAACC;AAEjB,uCAAA,vCAAMC;AAAN,AACE,OAACC,sBAAOH,oBAAW,cAAA,AAAAI,dAACC,8BAAKL;;AAE3B,qBAAA,rBAAMM;AAAN,AAAA,0FAAA,iDAAA,mFAAA,mDAAA,2CAAA,kLAAA,0GAAA,mFAAA,qEAAA,mFAAA,mEAAA,mFAAA,6EAAA,mFAAA,mDAAA,2CAAA,8LAAA,mFAAA,gDAAA,2CAAA,gMAAA,eAAA,mFAAA,gDAAA,2CAAA,oSAAA,h3DAEiB,CAAA,SAAc,2FAAA,OAAA,hGAAI,6CAAA,AAAAF,qCAAA,lFAACG,6DAAGP,8GAGnBE,ouBAIH,CAAA,aAAkB,2FAAA,OAAA,hGAAI,6CAAA,AAAAE,qCAAA,lFAACG,6DAAGP,4RAG5B,8DAAA,9DAACQ,6XACD,wDAAA,qEAAA,2CAAA,kDAAA,1NAACC;;AAEhB,gBAAA,hBAAMC;AAAN,AAAA,0FAAA,0DAAA,2CAAA,gMAAA,3IACkB,8DAAA,9DAACF;;AAEnB,kBAAA,lBAAMG;AAAN,AAAA,0FAAA,iEAEG,AAACD,gBACD,AAACJ;;AAIJ,qBAAA,rBAAMM;AAAN,AAAA,2FAAA,iDAAA,6GAAA,+GAAA,oHAAA,mHAAA,2GAAA,wHAAA,+GAAA,sHAAA,uGAAA,/5BAEIC,6GACAC,+GACAC,oHACAC,mHACAC,2GACAC,wHACAC,+GACAC,sHACAC,uGACAC;;AAEJ,sBAAA,tBAAMC,oDAAYC;AAAlB,AAAA,0FAAA,mDAAA,mFAEIC;;AAEJ,GAAA,QAAAC,gCAAAC,qCAAAC;AAAA;AAAA,AAAA,AAASC,iBAAM,gDAAA,hDAAC5B;;AAEhB,wBAAA,xBAAM6B;AAAN,AAAA,0FAAA,mDAAA,mFAEInB,wBACD,kBAAA,AAAAP,iCAAA,jBAAOyB,iBACL,iBAAME,OAAK,AAAA,mFAAO,AAAA,mFAAA,AAAA3B,gBAAQyB;AAA1B,AAAA,+FAAA,AAAAzB,LACG2B,qBAAMF;KAFX;;AAIH,kBAAA,mFAAA,mFAAA,IAAA,2CAAA,qDAAA,oEAAA,wFAAA,mFAAA,SAAA,2CAAA,qDAAA,qEAAA,zrBAAKG,qZAGMpB,yVAIAW;AAIX;;;kBAAA,lBAAuBU;AAAvB,AAGE,AAACC,iCACA,qEAAA,2CAAA,qDAAA,2CAAA,hNAACC,qDAAUH,uNAAyBI,+CACpC,WAAKC;AAAL,AAAQ,OAAClC,sBAAO0B,eAAMQ;GAFvB,2CAAA,sEAAA;;AAIA,wDAAA,jDAACC,oIAAaR,8BAAc,wBAAA,xBAAiBS;;AAE/C,gBAAA,hBAAMC;AAAN,AACE,OAACP","names":["app.core/open-hambg","reagent.core.atom","app.core/open-hambg->change-state","cljs.core/reset!","cljs.core/deref","cljs.core/not","app.core/right-nav","cljs.core._EQ_","reitit.frontend.easy.push_state","reitit.frontend.easy.href","app.core/logo","app.core/navbar","app.core/home-page","app.header/header","app.feature/feature","app.smartJackpots/smartJ","app.designedby/designed","app.whyus/whyus","app.ultimatefeature/uFeature","app.pricing/pricing","app.testimonila/testmonila","app.faq/faq","app.footer/footer","app.core/clock-page","match","app.clock/clock","js/app","js/app.core","js/app.core.match","app.core/match","app.core/current-page","view","app.core/routes","app.core/render","reitit.frontend.easy/start!","reitit.frontend.router","reitit.coercion.spec/coercion","m","reagent.dom.render","js/document","app.core/main"],"sourcesContent":["(ns app.core\n  [:require\n   [reagent.core :as r]\n   [reagent.dom :as rdom]\n  ;;  [reitit.core :as reit]\n   [reitit.frontend.easy :as rfe]\n   [reitit.frontend :as rf]\n   [reitit.coercion.spec :as rss]\n   [spec-tools.data-spec :as ds]\n   [fipp.edn :as fedn]\n   [app.clock :refer [clock]]\n   [app.header :refer [header]]\n   [app.feature :refer [feature]]\n   [app.smartJackpots :refer [smartJ]]\n   [app.designedby :refer [designed]]\n   [app.whyus :refer [whyus]]\n   [app.ultimatefeature :refer [uFeature]]\n   [app.pricing :refer [pricing]]\n   [app.testimonila :refer [testmonila]]\n   [app.faq :refer [faq]]\n   [app.footer :refer [footer]]])\n\n\n\n(def open-hambg (r/atom false))\n\n(defn open-hambg->change-state []\n  (reset! open-hambg (not @open-hambg)))\n\n(defn right-nav []\n  [:<>\n   [:div {:class (str \"hambg \" (if (= @open-hambg true)\n                                 \"show\"\n                                 \"\"))\n          :on-click open-hambg->change-state}\n    [:div.bar1]\n    [:div.bar2]\n    [:div.bar3]]\n   [:div {:class (str \"nav-items \" (if (= @open-hambg true)\n                                     \"show\"\n                                     \"\"))}\n    [:a {:href (rfe/push-state ::home)} \"Home\"]\n    [:a {:href (rfe/href ::clock {:id 1})} \"Clock\"]]])\n\n(defn logo []\n  [:a.logo {:href (rfe/push-state ::home)} \"Lab\"])\n\n(defn navbar []\n  [:nav.navbar\n   (logo)\n   (right-nav)])\n\n\n\n(defn home-page []\n  [:<>\n   [header]\n   [feature]\n   [smartJ]\n   [designed]\n   [whyus]\n   [uFeature]\n   [pricing]\n   [testmonila]\n   [faq]\n   [footer]])\n\n(defn clock-page [match]\n  [:div\n   [clock]])\n\n(defonce match (r/atom nil))\n\n(defn current-page []\n  [:div\n   [navbar]\n   (when @match\n     (let [view (:view (:data @match))]\n       [view @match]))])\n\n(def routes\n  [[\"/\"\n    {:name ::home\n     :view home-page}]\n\n   [\"/clock\"\n    {:name ::clock\n     :view clock-page}]\n   ])\n\n\n(defn ^:dev/after-load render\n  \"Render the toplevel component for this app.\"\n  []\n  (rfe/start!\n   (rf/router routes {:data {:coercion rss/coercion}})\n   (fn [m] (reset! match m))\n   {:use-fragment true})\n  (rdom/render [current-page] (.getElementById js/document \"app\")))\n\n(defn main []\n  (render))"]}